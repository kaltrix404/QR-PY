


#Error Correctin levels
ECC_L = 1
ECC_M = 0
ECC_Q = 3
ECC_H = 2

#Default ecc
DEFAULT_ECL = ECC_L

#Encoding modes
NUM_MODE = 1
ALNUM_MODE = 2
BYTE_MODE = 4

#Mode indicators
MODE_INDICATORS={
    NUM_MODE : "0001",
    ALNUM_MODE : "0010" ,
    BYTE_MODE : "0100"
}


#no of bits for each mode 
CHAR_BITS ={
    NUM_MODE : 10 ,# bits for 3                                                                   
    ALNUM_MODE : 11 ,# bits for 2 
    BYTE_MODE : 8 # bits for 1

}

#Alphanumeric character set
ALPHANUMS = {"0":0,"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,
    "A":10,"B":11,"C":12,"D":13,"E":14,"F":15,"G":16,"H":17,"I":18,"J":19,"K":20,"L":21,
    "M":22,"N":23,"O":24,"P":25,"Q":26,"R":27,"S":28,"T":29,"U":30,"V":31,"W":32,"X":33,"Y":34,
    "Z":35," ":36, "$":37,"%":38,"*":39,"+":40,"-":41,".":42,"/":43,":":44}



##############Codeword capabilities ##################
# 1 CWORD (codeword) = 8 bytes

#Format = { ECC_level : [v0 ,v1 ,v2 ...  ] ... }
#NOTE : v0 = 0 is a placeholder.(may be used for micro qr code)

BYTE_CWORD_CAP ={
    ECC_L: [0,
        19, 34, 55, 80, 108, 136, 156, 194, 232, 274,
        324, 370, 428, 461, 523, 589, 647, 721, 795, 861,
        932, 1006, 1094, 1174, 1276, 1370, 1468, 1531, 1631, 1735,
        1843, 1955, 2071, 2191, 2306, 2434, 2566, 2702, 2812, 2956
    ],
    ECC_M: [0,
        16, 28, 44, 64, 86, 108, 124, 154, 182, 216,
        254, 290, 334, 365, 415, 453, 507, 563, 627, 669,
        714, 782, 860, 914, 1000, 1062, 1128, 1193, 1267, 1373,
        1455, 1541, 1631, 1725, 1812, 1914, 1992, 2102, 2216, 2334
    ],
    ECC_Q: [0,
        13, 22, 34, 48, 62, 76, 88, 110, 132, 154,
        180, 206, 244, 261, 295, 325, 367, 397, 445, 485,
        512, 568, 614, 664, 718, 754, 808, 871, 911, 985,
        1033, 1115, 1171, 1231, 1286, 1354, 1426, 1502, 1582, 1666
    ],
    ECC_H: [0,
        9, 16, 26, 36, 46, 60, 66, 86, 100, 122,
        140, 158, 180, 197, 223, 253, 283, 313, 341, 385,
        406, 442, 464, 514, 538, 596, 628, 661, 701, 745,
        793, 845, 901, 961, 986, 1054, 1096, 1142, 1222, 1276
    ]
}


ALNUM_CWORD_CAP = {
    ECC_L: [0,
        19, 34, 55, 80, 108, 136, 156, 194, 232, 274,
        324, 370, 428, 461, 523, 589, 647, 721, 795, 861,
        932, 1006, 1094, 1174, 1276, 1370, 1468, 1531, 1631, 1735,
        1843, 1955, 2071, 2191, 2306, 2434, 2566, 2702, 2812, 2956
    ],
    ECC_M: [0,
        16, 28, 44, 64, 86, 108, 124, 154, 182, 216,
        254, 290, 334, 365, 415, 453, 507, 563, 627, 669,
        714, 782, 860, 914, 1000, 1062, 1128, 1193, 1267, 1373,
        1455, 1541, 1631, 1725, 1812, 1914, 1992, 2102, 2216, 2334
    ],
    ECC_Q: [0,
        13, 22, 34, 48, 62, 76, 88, 110, 132, 154,
        180, 206, 244, 261, 295, 325, 367, 397, 445, 485,
        512, 568, 614, 664, 718, 754, 808, 871, 911, 985,
        1033, 1115, 1171, 1231, 1286, 1354, 1426, 1502, 1582, 1666
    ],
    ECC_H: [0,
        9, 16, 26, 36, 46, 60, 66, 86, 100, 122,
        140, 158, 180, 197, 223, 253, 283, 313, 341, 385,
        406, 442, 464, 514, 538, 596, 628, 661, 701, 745,
        793, 845, 901, 961, 986, 1054, 1096, 1142, 1222, 1276
    ]
}


NUM_CWORD_CAP = {
    ECC_L: [0,
        19, 34, 55, 80, 108, 136, 156, 194, 232, 274,
        324, 370, 428, 461, 523, 589, 647, 721, 795, 861,
        932, 1006, 1094, 1174, 1276, 1370, 1468, 1531, 1631, 1735,
        1843, 1955, 2071, 2191, 2306, 2434, 2566, 2702, 2812, 2956
    ],
    ECC_M: [0,
        16, 28, 44, 64, 86, 108, 124, 154, 182, 216,
        254, 290, 334, 365, 415, 453, 507, 563, 627, 669,
        714, 782, 860, 914, 1000, 1062, 1128, 1193, 1267, 1373,
        1455, 1541, 1631, 1725, 1812, 1914, 1992, 2102, 2216, 2334
    ],
    ECC_Q: [0,
        13, 22, 34, 48, 62, 76, 88, 110, 132, 154,
        180, 206, 244, 261, 295, 325, 367, 397, 445, 485,
        512, 568, 614, 664, 718, 754, 808, 871, 911, 985,
        1033, 1115, 1171, 1231, 1286, 1354, 1426, 1502, 1582, 1666
    ],
    ECC_H: [0,
        9, 16, 26, 36, 46, 60, 66, 86, 100, 122,
        140, 158, 180, 197, 223, 253, 283, 313, 341, 385,
        406, 442, 464, 514, 538, 596, 628, 661, 701, 745,
        793, 845, 901, 961, 986, 1054, 1096, 1142, 1222, 1276
    ]
}

########################################################











############ Version info module precomputed values ##########

                        # index = version - 7 ( ex: index for v8 = 8=7 = 1;  )
VERSION_INFO_STRINGS = [[0,0,0,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0], #v7
                        [0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,0],
                        [0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,0,0,1],
                        [0,0,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1],
                        [0,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0],
                        [0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,1,0],
                        [0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1],
                        [0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,0,1],
                        [0,0,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0],
                        [0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,0,0],
                        [0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,0,1],
                        [0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,1,1],
                        [0,1,0,0,1,1,0,1,0,1,0,0,1,1,0,0,1,0],
                        [0,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0],
                        [0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1],
                        [0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,0,0,1],
                        [0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0],
                        [0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,1,0,0],
                        [0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1],
                        [0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1],
                        [0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1,0],
                        [0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,0,1,0],
                        [0,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,1],
                        [0,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,1],
                        [0,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0],
                        [1,0,0,0,0,0,1,0,0,1,1,1,0,1,0,1,0,1],
                        [1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,0,0,0],
                        [1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,0,1,0],
                        [1,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,1,1],
                        [1,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1],
                        [1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,1,1,0],
                        [1,0,0,1,1,0,1,0,1,0,0,1,1,0,0,1,0,0],
                        [1,0,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,0,0,0,1,1,0,0,0,1,1,0,1,0,0,1]] #v40


######################################################################

##### GROUPS,BLOCKS , ECC ############

# key =  totalDC  ,  

BLOCKS = {
        ECC_L:[0,
            (19, 7, ((1, 19), (None, None))),
            (34, 10, ((1, 34), (None, None))),
            (55, 15, ((1, 55), (None, None))),
            (80, 20, ((1, 80), (None, None))),
            (108, 26, ((1, 108), (None, None))),
            (136, 18, ((2, 68), (None, None))),
            (156, 20, ((2, 78), (None, None))),
            (194, 24, ((2, 97), (None, None))),
            (232, 30, ((2, 116), (None, None))),
            (274, 18, ((2, 68), (2, 69))),
            (324, 20, ((4, 81), (None, None))),
            (370, 24, ((2, 92), (2, 93))),
            (428, 26, ((4, 107), (None, None))),
            (461, 30, ((3, 115), (1, 116))),
            (523, 22, ((5, 87), (1, 88))),
            (589, 24, ((5, 98), (1, 99))),
            (647, 28, ((1, 107), (5, 108))),
            (721, 30, ((5, 120), (1, 121))),
            (795, 28, ((3, 113), (4, 114))),
            (861, 28, ((3, 107), (5, 108))),
            (932, 28, ((4, 116), (4, 117))),
            (1006, 28, ((2, 111), (7, 112))),
            (1094, 30, ((4, 121), (5, 122))),
            (1174, 30, ((6, 117), (4, 118))),
            (1276, 26, ((8, 106), (4, 107))),
            (1370, 28, ((10, 114), (2, 115))),
            (1468, 30, ((8, 122), (4, 123))),
            (1531, 30, ((3, 117), (10, 118))),
            (1631, 30, ((7, 116), (7, 117))),
            (1735, 30, ((5, 115), (10, 116))),
            (1843, 30, ((13, 115), (3, 116))),
            (1955, 30, ((17, 115), (None, None))),
            (2071, 30, ((17, 115), (1, 116))),
            (2191, 30, ((13, 115), (6, 116))),
            (2306, 30, ((12, 121), (7, 122))),
            (2434, 30, ((6, 121), (14, 122))),
            (2566, 30, ((17, 122), (4, 123))),
            (2702, 30, ((4, 122), (18, 123))),
            (2812, 30, ((20, 117), (4, 118))),
            (2956, 30, ((19, 118), (6, 119)))],
    ECC_M:[0,
        (16,10,((1,16),(None,None))),
        (28,16,((1,28),(None,None))),
        (44,26,((1,44),(None,None))),
        (64,18,((2,32),(None,None))),
        (86,24,((2,43),(None,None))),
        (108,16,((4,27),(None,None))),(124,18,
                ((4,31),(None,None))),(154,22,((2,38),(2,39))),(182,22,((3,36),(2,37))),(216,26,((4,43),(1,44))),(254,30,((1,50),(4,51))),(290,22,((6,36),(2,37))),(334,22,((8,37),(1,38))),(365,24,((4,40),(5,41))),(415,24,((5,41),(5,42))),(453,28,((7,45),(3,46))),(507,28,((10,46),(1,47))),(563,26,((9,43),(4,44))),(627,26,((3,44),(11,45))),(669,26,((3,41),(13,42))),(714,26,((17,42),(None,None))),(782,28,((17,46),(None,None))),(860,28,((4,47),(14,48))),(914,28,((6,45),(14,46))),(1000,28,((8,47),(13,48))),(1062,28,((19,46),(4,47))),(1128,28,((22,45),(3,46))),(1193,
                28,((3,45),(23,46))),(1267,28,((21,45),(7,46))),(1373,28,((19,47),(10,48))),(1455,28,((2,46),(29,47))),(1541,28,((10,46),(23,47))),(1631,28,((14,46),(21,47))),(1725,28,((14,46),(23,47))),(1812,28,((12,47),(26,48))),(1914,28,((6,47),(34,48))),(1992,28,((29,46),(14,47))),(2102,28,((13,46),(32,47))),(2216,28,((40,
                47),(7,48))),(2334,28,((18,47),(31,48)))],

    ECC_Q: [0,(13,13,((1,13),(None,None))),(22,
                22,((1,22),(None,None))),(34,18,((2,17),(None,None))),(48,26,((2,24),(None,None))),(62,18,((2,15),(2,16))),(76,24,((4,19),(None,None))),(88,18,((2,14),(4,15))),(110,22,((4,18),(2,19))),(132,20,((4,16),(4,17))),(154,24,((6,19),(2,20))),(180,28,((4,22),(4,23))),(206,26,((4,20),(6,21))),(244,24,((8,20),(4,21))),(261,20,((11,16),(5,17))),(295,30,((5,24),(7,25))),(325,24,((15,19),(2,20))),(367,28,((1,22),(15,23))),(397,28,((17,22),(1,23))),(445,26,((17,21),(4,22))),(485,30,((15,
                24),(5,25))),(512,28,((17,22),(6,23))),(568,30,((7,24),(16,25))),(614,30,((11,24),(14,25))),(664,30,((11,24),(16,25))),(718,30,((7,24),(22,25))),(754,28,
                ((28,22),(6,23))),(808,30,((8,23),(26,24))),(871,30,((4,24),(31,25))),(911,30,((1,23),(37,24))),(985,30,((15,24),(25,25))),(1033,30,((42,24),(1,25))),(1115,30,((10,24),(35,25))),(1171,30,((29,24),(19,25))),(1231,30,((44,24),(7,25))),(1286,30,((39,24),(14,25))),(1354,30,((46,24),(10,25))),(1426,30,((49,24),(10,25))),(1502,30,((48,24),(14,25))),(1582,30,((43,24),(22,25))),(1666,30,((34,24),(34,25)))],

    ECC_H: [  0,
            (9, 17, ((1, 9), (None, None))),
            (16, 28, ((1, 16), (None, None))),
            (26, 22, ((2, 13), (None, None))),
            (36, 16, ((4, 9), (None, None))),
            (46, 22, ((2, 11), (2, 12))),
            (60, 28, ((4, 15), (None, None))),
            (66, 26, ((4, 13), (1, 14))),
            (86, 26, ((4, 14), (2, 15))),
            (100, 24, ((4, 12), (4, 13))),
            (122, 28, ((6, 15), (2, 16))),
            (140, 24, ((3, 12), (8, 13))),
            (158, 28, ((7, 14), (4, 15))),
            (180, 22, ((12, 11), (4, 12))),
            (197, 24, ((11, 12), (5, 13))),
            (223, 24, ((11, 12), (7, 13))),
            (253, 30, ((3, 15), (13, 16))),
            (283, 28, ((2, 14), (17, 15))),
            (313, 28, ((2, 14), (19, 15))),
            (341, 26, ((9, 13), (16, 14))),
            (385, 28, ((15, 15), (10, 16))),
            (406, 30, ((19, 16), (6, 17))),
            (442, 24, ((34, 13), (None, None))),
            (464, 30, ((16, 15), (14, 16))),
            (514, 30, ((30, 16), (2, 17))),
            (538, 30, ((22, 15), (13, 16))),
            (596, 30, ((33, 16), (4, 17))),
            (628, 30, ((12, 15), (28, 16))),
            (661, 30, ((11, 15), (31, 16))),
            (701, 30, ((19, 15), (26, 16))),
            (745, 30, ((23, 15), (25, 16))),
            (793, 30, ((23, 15), (28, 16))),
            (845, 30, ((19, 15), (35, 16))),
            (901, 30, ((11, 15), (46, 16))),
            (961, 30, ((59, 16), (1, 17))),
            (986, 30, ((22, 15), (41, 16))),
            (1054, 30, ((2, 15), (64, 16))),
            (1096, 30, ((24, 15), (46, 16))),
            (1142, 30, ((42, 15), (32, 16))),
            (1222, 30, ((10, 15), (67, 16))),
            (1276, 30, ((20, 15), (61, 16)))]
}


# Version and EC Level	Total Number of Data Codewords for this Version and EC Level	EC Codewords Per Block	Number of Blocks in Group 1	Number of Data Codewords in Each of Group 1's Blocks	Number of Blocks in Group 2	Number of Data Codewords in Each of Group 2's Blocks	Total Data Codewords
